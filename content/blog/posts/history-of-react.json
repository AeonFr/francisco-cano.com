{
  "draft": true,
  "date": "2020-02-05T23:18:09Z",
  "title": "History of React (from websites to web apps)",
  "body": "## Barbara Liskov invented **abstract data types** in 1974, changing the software world forever[^1].\n\nThe concept of *modularization* is so ubiquitous nowadays for programmers, is hard to imagine someone had to define it.\n\nBarbara Liskov undestood that the API, the contract that the module offers, should not deppend on the implementation details of such program. Meaning a programmer should be able to modify the implementation of a program without changing it’s “public” behavior.\n\n> “What we desire from an abstraction is a mechanism which permits the expression of relevant details and the suppression of irrelevant details.”\n\n> — Programming With Abstract Data Types\n\nLiskov’s research concluded in a programming language that is precursor of modern OOP languages.\n\n> “You could define abstract types with it, and then create instances of those objects. It had information hiding as a way to make programs easier to prove correct. It provided strong type checking, and many other techniques, that are so widespread today, that almost seem too basic to be talking about them.”[^1]\n\n[^1]: https://medium.com/a-computer-of-ones-own/barbara-liskov-inventor-of-abstract-data-types-9f8908fdcf86\n\n## In 2013, React became open source.\n\nReact solves common issues developers face coding UIs, and does so through:\n\n- Declarative rendering\n\n- Top-down data flow\n\n- Encapsulated components\n\nReact is based in **components** that are written in a programming paradigm known as *reactive declarative programming*.\n\nComponents are *declarative* because we don’t write what steps are needed to perform an action, we instead *declare* what the system should look like.\n\nThink of a button with a counter. We can say “every time the button is clicked, the counter increments”.\n\n```html\n\nCounter: <span class=\"js-counter\">0</span>\n\n<button onclick=\"addCounter()\">Add 1</button>\n\n<script>\n\n\tlet counter = 0;\n\n\tfunction addCounter() {\n\n\t\t$('.js-counter').html( counter++ );\n\n\t};\n\n```\n\nWhereas apparently simple, this approach has some problems:\n\n1. **The value for “counter” is duplicated.** Our counter started at zero, but what if we want it to start at something else?\n\n2. **It’s not reusable.** What if we wanted to show it twice, but initialized with different values?\n\n3. **Your HTML is deeply-related to the JS, so it’s now hard to refactor.** We created a `<span>` tag that’s unnecesary, only to show the value of counter. If we accidentaly delete it, the HTML would break. Yet, it’s not obvious that this span can’t be deleted just by looking at the HTML. In legacy codebases, it’s hard to refactor HTML when JS is not clearly written or doesn’t follow some conventions (like prefixing classnames with `js-`).\n\n4. **Doesn’t scale very well.** Just imagine every time you wan’t to show `counter` in another part of the HTML, you have to make your `addCounter()` function bigger. Now what if we also want to have a `removeCounter()` function? This can make very simple things grow into a huge amount lot of code.\n\nBut what if, instead, we could say: “This number is the ammount of times I’ve pressed the counter”?\n\n(What if we write that same component using a *declarative*, instead of an *imperative*, programming paradigm?)\n\n```jsx\n\nfunction Counter({ defaultValue: 0 }) {\n\n\tlet [counter, setCounter] = useState(defaultValue);\n\n\t\n\n\treturn (<div>\n\n\t\tCounter: {counter}\n\n\t\t<button onClick={() => setCounter(counter + 1)}>\n\n\t\t\tAdd 1\n\n\t\t</button>\n\n\t</div>);\n\n}\n\n// We could call this component like this:\n\n<Counter />\n\n// Or like this:\n\n<Counter defaultValue=\"0\"/>\n\n```\n\nLet’s see what are the advantages:\n\n1. The default value of counter is only declared once, passed as an optional argument to the function component. **No data duplication.**\n\n2. The Component can be reused (no global variables).\n\n3. We can print `{counter}` as many times as we want without making the `onClick` handler’s code grow in size.\n\n## Components are Abstract Data Types (just like Objects in OOP languages)."
}
