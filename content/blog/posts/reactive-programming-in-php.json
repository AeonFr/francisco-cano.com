{
  "title": "Reactive programming in PHP",
  "draft": true,
  "date": "2019-11-30T01:35:48.284Z",
  "body": "As I was taking the [2019 State of Javascript Survey](https://stateofjs.com/), one of the questions triggered an unusual idea...\n\n> Patterns: How do you prefer writing code:\n>\n> * Object-Oriented Programming \n> * Functional Programming\n> * Reactive Programming\n\nThis question revealed an interesting underlying assumptiom, something I knew by heart but hadn't been quite articulated yet: that Reactive Programming is a new paradigm for building apps.\n\nReactive applications can either be written using Object-Oriented syntax or functions, but what's different about them is the concept of the **component**.\n\nA component is an isolated module that can contain business logic, presentation logic and can accept arguments (props).\n\nEach component might as well be a standalone and functional application, only dependant of the child components it contains.\n\nFor example, a form component might be shown within a page with three forms of taking up the hole page. The same component can be reused without hasle and without duplicating code or logic.\n\n## PHP and Reactive Programming\n\nIf Reactive Programming was a new approach to build apps, why was it only used in JavaScript?\n\nTraditional PHP applications (let's think of a Laravel app, for example) have this flow:\n\n1. Controller receives Request, then shows View\n2. View has a form, user submits form.\n3. Controller process form, data updates, Controller sends redirect (go back to 1. but whith updated data in the DB)\n\nThis is a very succesfull approach, it indeed works in very large applications. But it doesn't align very good with the way of thinking of the developer. This is how the application could be schematized:\n\n[![Traditional Controller Based App. Click to open in Google Docs.](/img/uploads/traditional-controller-based-applications.svg \"Click to open in Google Docs.\")](https://docs.google.com/drawings/d/1Uos0VjQ89bd3p_FkjzqoDL6gLCpkdtOhZ5A0LyErv_0/edit?usp=sharing \"Click to view in Google Docs\")\n\nThis architecture is fine until we have the same form in different views or we have more than one form, or action, in the same view.\n\nWhen using the form in multiple views, it creates the need to use dinamic redirect rules. It's not a big issue, but it's also something difficult to trace or reason about and adds complexity.\n\nWhen more than one form, or action, is available in the same view, it creates a lot of controllers that are related to the same view, but are not encapsulated in any obvious way. If you combine this with the need to use the same form in various views, it creates a view that's difficult to reuse and difficult to reason about.\n\nTipically, for simple filter actions, the same controller that renders the view has the logic to do the filtering and return it. This violates the Single Responsibility Principle, but it helps in making the app easier to reason about.\n\nThis is how a view with three forms and a search input could look like:\n\n[![Controller-Based App with three forms and a search/filter form.](/img/uploads/controller-based-app-with-three-forms-and-a-search_filter-form.svg)](https://docs.google.com/drawings/d/1_9zcFBMCkT11p9JutJnHKp18r_MLlqBqyHIH7wMlpJQ/edit?usp=sharing \"Click to view in Google Docs\")\n\nWhat if there was a better way?\n\nThis is the complex app above, but in a component based approach:\n\n[![Complex App in Reactive Programming](/img/uploads/complex-app-in-reactive-programming.svg)](https://docs.google.com/drawings/d/1G3R-HFbfgzvnhTIKNWNq_vZMuEz-ODebQw1-VkEkcQ8/edit?usp=sharing \"Click to open in Google Draw\")\n\nIn the Reactive Programming app, each sub-component contains the logic to mutate the global state (the Database in this case, but it might as well be a Cookie, a Session variable, or the App's Endpoint).\n\nA single Controller is needed, every method call is then handled by the Controller by exploring the *Component Three* and finding the method it should execute.\n\nYou might have noticed some things in this approach:\n\n- The architecture of the app is now radically more simple than before\n- "
}