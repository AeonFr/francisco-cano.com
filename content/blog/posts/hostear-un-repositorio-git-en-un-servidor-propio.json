{
  "title": "Hostear un repositorio Git en un servidor propio",
  "draft": true,
  "date": "2018-11-09T20:06:25+01:00",
  "thumbnail": "/img/uploads/git-remote-server.png",
  "body": "Tener acceso a servidores para Git como **GitHub** o **BitBucket** tiene sus ventajas, pero a veces puede ser preferible tener un backup de nuestros repositorios en **un servidor propio**.\n\n## Requisitos\n\nPara usar Git en un servidor propio, deberás poder acceder al servidor por la consola SSH y Git deberá estar instalado en el servidor. Este tutorial no cubre la instalación de Git ni la obtención de claves SSH.\n\n## Desventajas\n\nSi bien tener un repositorio en tu propio servidor suena atractivo, ten en cuenta que no podrás compartir fácilmente el repositorio. Como es necesario acceso SSH para clonar o pushear cambios, necesitarás compartir tus credenciales con colaboradores.\n\nPor ello considero que esta es una buena opción para repositorios personales, o como un segundo `remote` que funcione como back-up, por si hubiera problemas con GitHub, BitBucket o tu servidor de Git de preferencia.\n\n## Instalación\n\nEl proceso es bastante simple: deberás crear una carpeta donde alojar tu repositorio en tu servidor (el nombre de la carpeta, por convención, termina en .git).\n\n``` bash\n# En tu servidor\n$ mkdir -p repos/git_test.git\r\n$ cd repos/git_test.git\n```\n\nInicializa el repositorio con el siguiente comando:\n\n``` bash\n$ git init --bare\n```\n\nSi todo va bien, verás un mensaje como este:  \n`Initialized empty Git repository in /home/path/to/repos/git_test.git`\n\n## Conectar tu repositorio local\n\nPara conectar tu repositorio local con el remoto, y empezar a hacer push y pulls, debes cambiar el `remote origin` de tu repositorio por `ssh://user@host/home/path/to/repos/git_test.git`\n\n> `user@host` es una cadena que contiene tu nombre de usuario, seguido de un arroba, seguido de la dirección IP del servidor. Opcionalmente, puedes especificar el número de puerto con la siguiente sintaxis: `user@host:port`.\n\n``` bash\n# En tu repositorio local\n$ cd path/to/your/repo\n$ git remote add origin ssh://user@host/home/path/to/repos/git_test.git\n```\n\nSi no tuviste problemas, ya puedes realizar un push hacia tu servidor.\n\n``` bash\n$ git push origin\n```\n\n## Usar tu servidor como \"backup\" de GitHub\n\nPara usar tu servidor como backup de GitHub/BitBucket/GitLab/Etc., por ejemplo porque quieres migrar de una plataforma a otra, deberás agregar tu `remote` SSH con otro nombre, por ejemplo, `backup`.\n\n``` bash\n# En tu repositorio local\n$ git remote add backup ssh://user@host/home/path/to/repos/git_test.git\n```\n\nYa puedes realizar push usando el remote `backup`.\n\n``` bash\n$ git push backup\n```\n\n## Detrás de la cortina\n\nPara entender un poco más cómo funciona el comando `git init --bare`, podemos explorar la estructura de carpetas que genera.\n\n``` bash\n$ git --bare init\r\nInitialized empty Git repository in /home/path/to/repos/git_test.git\n$ ls\r\nHEAD        config      hooks/      objects/\r\nbranches/   description info/       refs/\n``` \n\nSi haz realizado un `git init --bare` por error en una carpeta equivocada, y quieres deshacerlo, bastará con eliminar las carpetas generadas por este comando.\n\n``` bash\n$ rm -rf HEAD config hooks objects branches description info refs\n```\n\nTen cuidado que no hayan anteriormente carpetas con el mismo nombre.\n\n## Fin\n\nHemos aprendido cómo utilizar nuestro servidor web como un servidor git. También hemos aprendido a crear más de un `remote` para nuestros repositorios (para tener un mismo repo hosteado en más de un sitio), y cómo hacer push a distintos `remotes`."
}