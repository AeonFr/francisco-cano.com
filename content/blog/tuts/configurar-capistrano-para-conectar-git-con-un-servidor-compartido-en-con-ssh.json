{
  "title": "Configurar Capistrano para conectar un repositorio Git con tu servidor web",
  "date": "2018-08-10T16:03:25+02:00",
  "body": "La herramienta Capistrano permite configurar _hooks_ de integración continua mediante un repositorio en Git y un servidor al que tengas acceso SSH.\n\nEste tutorial se centra en cómo configurar Capistrano para proveer integración entre un repositorio en GitHub o GitLab y un servidor compartido en Hostinger.\n\nSin embargo, los pasos deberían poder seguirse en otros proveedores de Git y otros servidores de forma fácil. Si encuentras algún problema al implementar este tutorial, puedo ayudarte si envías un _issue_ en el [repositorio de GitHub de este mismo sitio web](https://github.com/AeonFr/francisco-cano.com), o si te contactas conmigo por email, o por cualquiera de los medios de contacto provistos en esta web.\n\n# Capistrano\n\nCapistrano (<http://capistranorb.com>) es un software que automatiza el _despliegue_ (_deployment_) del código de tu aplicación en una forma simple, predecible y fácil de revertir (si cometes un error es fácil volver al estado anterior, con un solo comando).\n\nCapistrano corre en un máquina local, y se comunica con el servidor remoto mediante SSH. Muchos hostings compartidos proveen acceso SSH con un usuario \"no _root_\", mientras que en los servidores dedicados tienes acceso SSH completo. En nuestro caso en particular, configuraremos Capistrano para un servidor sin acceso _root_, lo cual require únicamente un paso adicional.\n\n_(DESDE EL SIGUIENTE PÁRRAFO Y HASTA NUEVO AVISO, ESTE POST CONTIENE UNA TRADUCCIÓN DEL LIBRO \"MODERN PHP\" POR JOSH LOCKHART. PREFERÍ COPIAR ESTA EXPLICACIÓN DE FORMA CASI LITERAL DESDE EL LIBRO, YA QUE ESTÁ MUY COMPLETA Y APLICA A CUALQUIER TIPO DE APLICACIÓN, YA SEA UNA APP EN PHP O EN OTRO LENGUAJE.)_\n\nCapistrano funciona organizando los despliegues de la App en sus propios directorios en el servidor remoto. Capistrano mantiene cinco o más directorios de despliegues de la App en caso en que tengas que revertir el código a un estado anterior. Capistrano también crea un directorio _current/_ que es un _symlink_ al directorio de despliegue actual. En el servidor de producción, la estructura de Capistrano puede verse así:\n\n```\n/home/user/public_html/\n    my_app/\n        current/\n        releases/\n            release1/\n            release2/\n            release3/\n```\n\n## Instalación\n\nInstalar capistrano en tu máquina local require `ruby` y `gem`. Si tienes OS X, ya vendrán instalados. Luego de instalar `ruby` y `gem`, instala Capistrano con este comando:\n\n```\ngem install capistrano\n```\n\n## Configuración\n\nLuego de instalar Capistrano, debes inicializar tu proyecto. Abre una terminal, navega hasta el directorio raíz, y corre el siguiente comando:\n\n```\ncap install\n```\n\nEste comando crea un archivo llamado `Capfile`, un directorio llamado `config/`, y un directorio llamado `lib/`. El directorio raíz de tu proyecto ahora debería tener esta estructura:\n\n```\nCapfile\nconfig/\n    deploy/\n        production.rb\n        staging.rb\n    deploy.rb\nlib/\n    capistrano/\n        tasks/\n```\n\nTal vez quieras actualizar tu archivo `.gitignore` para ignorar las carpetas creadas por Capistrano:\n\n```\n# .gitignore\n\nCapfile\n/lib\n/config\n/log/capistrano.log\n```\n\nEl archivo `Capfile` es el archivo de configuración de Capistrano, al que se le agrega la configuración del directorio `config/`. El directorio `config/` contiene archivos de configuración para cada entorno en el servidor remoto (ej.: testing, staging, production).\n\nLos archivos de configuración están escritos en ruby, sin embargo son fáciles de entender.\n\nPor defecto, Capistrano asume que tienes múltiples entornos para tu aplicación. Por ejemplo, puedes tener un entorno para producción y otro para \"representación\" (_staging_). Capistrano provee múltiples archivos de configuración, para distintos entornos, por defecto. Estos archivos se encuentran en el directorio `config/deploy/`. Capistrano también provee el archivo `config/deploy.rb`, que contiene configuración común a todos los entornos.\n\nDentro de cada entorno, Capistrano tiene la noción de _roles_ del servidor. Por ejemplo, tu entorno de producción podría tener un entorno que apunte al _front-end_ de tu sitio web (el _rol_ `web`), uno que apunte al servidor de la aplicación (el _rol_ `app`), y un servidor para la base de datos (el _rol_ `db`). Sólo las grandes aplicaciones necesitan esta arquitectura. \\[...] En esta demostración sólo utilizaremos el _rol_ `web` y el entorno `production`, pero los siguientes pasos se pueden aplicar a otros entornos. \\[...]\n\n### El archivo config/deploy.rb\n\nVeamos el archivo `config/deploy.rb`. Este archivo contiene variables relativas a todos los entornos. La mayoría de nuestra configuración va en este archivo. Abre el archivo con tu editor de texto preferido y edita estas opciones:\n\n<dl>\n  <dt><code>:application</code></dt>\n  <dd>Este es el nombre de tu aplicación. Debe contener sólo letras, números y guiones bajos.</dd>\n  <dt><code>:repo_url</code></dt>\n  <dd>Esta es la URL de tu repositorio en Git. Esta URL debe apuntar a un repositorio válido, y dicho repositorio debe ser accesible desde tu servidor remoto.</dd>\n  <dt><code>:deploy_to</code></dt>\n  <dd>Este es el nombre de directorio absoluto a tu servidor remoto, en la cual tu aplicación PHP va a ser <em>desplegada</em>. [En un servidor de Hostinger, es comúnmente <code>/home/u0000/public_html</code>; donde <code>u0000</code> es tu nombre de usuario SSH.]</dd>\n  <dt><code>:keep_releases</code></dt>\n  <dd>Este es el número de <em>releases</em> (lanzamientos) anteriores que deberían ser conservados en caso que quieras revertir tu App a un estado anterior.</dd>\n  <dt><code>:tmp_dir</code></dt>\n  <dd><em>Este es el paso adicional que deberás hacer sólamente si tu servidor es compartido.</em> Hostinger no provee acceso <em>root</em> a tu usuario SSH, y Capistrano intentará escribir archivos a la carpeta <code>~/temp/</code>, resultando en un error: <code>Permission denied\n / fatal: unable to fork</code>. Debes usar un directorio temporal al que tengas acceso.</dd>\n</dl>\n\n_(HASTA AQUÍ HA SIDO UNA TRADUCCIÓN CASI LITERAL DEL CAPÍTULO \"DEPLOYMENT\" DEL LIBRO \"MODERN PHP\" DE JOSH LOCKHART. DEJARÉ UN LINK CON MÁS INFORMACIÓN SOBRE EL LIBRO AL FINAL DEL POST. EL RESTO DEL CONTENIDO DEL POST SIGUE BASÁNDOSE EN ESTE LIBRO, PERO MÁS CENTRADO EN EL ENTORNO HOSTINGER - GITHUB.)_\n\nEl nuevo contenido del archivo `config/deploy.rb`, quitando algunos comentarios, debería verse así:\n\n```\n# config/deploy.rb\nset :application, \"my_app\"\nset :repo_url, \"git@gitlab.com:aeonfr/demo.git\"\n\nset :deploy_to, \"/home/u624400000/public_html\"\nset :tmp_dir, '/home/u624400000/public_html/tmp'\n\nset :keep_releases, 5\n```\n\nTu URL de git empezará con `https://` si tu repositorio es público, y con `git@` si tu repositorio es privado.\n\nRecuerda reemplazar los valores para `:deploy_to` y `:tmp_dir`; deberás comprobar la ruta bajo la cual se encuentra el directorio `public_html/` para tu servidor.\n\n### El archivo config/deploy/production.rb\n\nEste archivo contiene ajustes que son válidos sólo para tu entorno de producción. En este archivo se definen los _roles_ del entorno de producción. Sólo usaremos el rol `web`, ya que sólo tenemos un servidor que pertenece a este rol.\nActualiza todo el contenido de este archivo con:\n\n```\n# config/deploy/production.rb\nrole :web, %w{u624400000@185.201.00.00} # usuario + @ + IP SSH\nset :ssh_options, { port: 65002 } # Puerto de mi sitio\n```\n\nLa línea número dos es necesaria sólo porque Hostinger no utiliza el puerto SSH por defecto (el `22`).  Para encontrar los valores para tu usuario, IP y puerto SSH, en el panel de administración de tu sitio en Hostinger, debes ir a Avanzado > Acceso SSH. Encontrarás en esta misma pantalla un _checkbox_ donde deberás activar el acceso SSH. Luego de cambiar la casilla desde _disabled_ a _enabled_ (activar) y de presionar el botón de Actualizar, verás los datos para acceder.\n\n![Ejemplo del contenido de la pestaña \"Acceso SSH\" de Hostinger.](/img/uploads/acceso-ssh-en-hostinger.png)\n\nTip: Si copias el valor para Comando SSH CLI en tu consola, podrás empezar a ejecutar comandos en tu servidor desde tu computadora local. Por ejemplo, usando `ls -lR` tienes un listado recursivo de todos los archivos de tu servidor. Si recién creas el sitio, seguramente querrás eliminar el archivo `.../public_html/default.php` que Hostinger a creado por tí. Puedes hacer esto navegando hasta la carpeta `public_html/` y usando el comando `rm -i default.php`.\n\n## Autentifícate\n\nAntes de desplegar nuestra aplicación con Capistrano, debemos establecer autentificación entre tu computadora local y el servidor remoto, y entre el servidor remoto y el repositorio en Git.\n\n### Autentificar tu computadora local con el servidor remoto\n\nSi vienes siguiendo el paso anterior, habrás abierto, dentro del panel de administración de Hostinger, la página \"Avanzado > Acceso SSH\" para ver tus credenciales. Dentro de esta misma pantalla hay una sección para agregar una nueva clave SSH a tu cuenta.\n\nDebes generar una clave SSH en tu computadora local y subir el contenido de la clave pública (`id_rsa.pub`) al cuadro correspondiente.\nPara ello corre el comando `ssh-keygen`. El `passphrase` puede estar vacío o puedes utilizar una contraseña (no debes olvidarte esta contraseña). Yo lo dejo vacío.\n\n```\n> ssh-keygen                                                                  \nGenerating public/private rsa key pair.                                       \nEnter file in which to save the key (C:\\Users\\francisco/.ssh/id_rsa):         \nEnter passphrase (empty for no passphrase):                                   \nEnter same passphrase again:                                                  \nYour identification has been saved in C:\\Users\\francisco/.ssh/id_rsa.         \nYour public key has been saved in C:\\Users\\francisco/.ssh/id_rsa.pub.         \nThe key fingerprint is:                                                       \nSHA256:[...]\nThe key's randomart image is:                                                 \n[...]\n```\n\nEl contenido que debes copiar es, en mi caso, el contenido del archivo `C:\\Users\\francisco/.ssh/id_rsa.pub`.\n\n#### Para servidores dedicados\n\nSi, en cambio, tienes un servidor dedicado, debes copiar manualmente el archivo `id_rsa.pub` a la carpeta `~/.ssh/` de tu servidor (puede que necesites crear dicha carpeta primero). Los ejemplos de abajo asumen que tienes creado un usuario `deploy` en tu servidor remoto, que el puerto es el puerto `22` y la IP es `123.456.78.90`. Debes reemplazar estos valores con los que aplican para tu servidor.\n\n```\n# Copia el archivo id_rsa.pub a tu servidor\nscp -P 22 C:\\Users\\francisco/.ssh/id_rsa.pub deploy@123.456.78.90\n```\n\nAccede a tu servidor por SSH y crea la carpeta `~/.ssh/` (si no existe).\n\n```\nmkdir ~/.ssh\n```\n\nLuego, crea el archivo `~/.ssh/authorized_keys` con este comando:\n\n```\ntouch ~/.shh/authorized_keys\n```\n\nEste archivo contiene una lista de claves públicas que tienen acceso al servidor remoto. Ejecuta este comando para concatenar la clave pública que acabas de subir hacia el archivo `~/.ssh/authorized_keys`.\n\n```\ncat ~/id_rsa.pub >> ~/.ssh/authorized_keys\n```\n\nSi tienes un usuario exclusivo para hacer despliegues, llamado `deploy`, y un usuario `root` por separado (que es recomendado), debes modificar los permisos para que sólo el usuario `deploy` tenga acceso a su propio directorio `~/.ssh`. (Esto tendrá más sentido si haz seguido el proceso de creación de usuarios de la forma que Josh Lockhart recomienda en el ya citado libro \"Modern PHP\" - recomiendo leerlo para entender la importancia de tener un usuario `deploy` con permisos limitados).\n\n```\nchown -R deploy:deploy ~/.ssh;\nchmod 700 ~/.ssh;\nchmod 600 ~/.ssh/authorized_keys;\n```\n\n### Autentifica tu servidor remoto con tu proveedor Git\n\nAhora debes proveer acceso entre tu servidor remoto y tu servidor en Git.\n\nEn Hostinger, dirígete a \"Avanzado > Git\" y genera una clave SSH desde la interfaz web.\n\n![Interfaz web para crear claves SSH](/img/uploads/hostinger-claves-ssh-para-git.png)\n\nTu nueva clave SSH empezará con `ssh-rsa` y terminará (probablemente) con `main-hosting.eu`. Debes copiar el contenido de la clave SSH y añadirla a tu cuenta de GitLab, GitHub o BitBucket.\n\nEn GitLab, debes ir a \"Profile > SSH Keys\" (<https://gitlab.com/profile/keys>). En GitHub, debes ir a \"Settings > SSH and GPG Keys\" (<https://github.com/settings/keys>).\n\nSi tienes un servidor remoto, sigue las mismas instrucciones para crear una clave SSH que hemos seguido en el paso anterior, pero esta vez generando las claves en tu servidor remoto, en vez de hacerlo en tu computadora local.\n\n## Preparar el servidor\n\nCapistrano creará un directorio `current/`y otro directorio `releases/`. Sólo queremos que nuestra aplicación apunte al directorio `current/`, y no queremos que se pueda acceder manualmente a los otros directorios. Deberás utilizar archivos `.htaccess` u otra estrategia similar.\n\nEn mi caso, sólo un subdominio de mi servidor está alojado en Hostinger. Para ello, apunté el `A record` hacia un subdominio (en mi caso concreto le puse de nombre `development`), con la dirección IP provista por Hostinger (esta dirección IP figura en la información de tu sitio). Abajo se puede ver dónde encontrar la IP de Hostinger y cómo configurar el dominio `development` en Namecheap.com (mi proveedor de dominios).\n\n![Información de la cuenta en Hostinger.](/img/uploads/detalles-cuenta-hostinger.png)\n\n![Configuración en NameCheap](/img/uploads/namecheap-config.png)\n\nEn la misma pantalla de creación de dominios puedes elegir a qué subcarpeta apunta, en mi caso he apuntado a la carpeta `development/current/` (ya que el valor para `:deploy_to` en mi `config/deploy.rb` apunta a la carpeta `development/`).\n\n![Ejemplo de la página de configuración para mi sitio dentro de Dominios > Subdominios](/img/uploads/subdomain-hostinger.png)\n\nEste tipo de configuración es recomendada ya que podrás tener por separado el `front-end` de tu aplicación junto con el código del `back-end` (incluso en servidores separados). Con esta configuración, el contenido de `public_html/` es efectivamente inaccesible.\n\nPara quienes estén siguiendo el tutorial, pero tengan un servidor dedicado, este paso es más fácil: debes simplemente apuntar el `document root` de tu aplicación web al directorio `current/` de Capistrano. Este suele hacerse desde el archivo de configuración de Apache o Nigx, según el caso; y luego deberás reiniciar tu servidor web. Adicionalmente, deberás instalar `git` y (si lo usas) `composer` en el servidor dedicado.\n\n## Desplegar la aplicación\n\nAhora viene lo más importante! Asegúrate de haber hecho un `commit` y un `push` del código más reciente de tu aplicación a tu repositorio Git. Luego, abre una terminal y navega hacia el directorio raíz de tu App. Si haz hecho todo correctamente, puedes desplegar (_deploy_) tu App con el comando:\n\n```\ncap production deploy\n```\n\n## Deshacer un despliegue\n\nExiste la posibilidad de que despliegues código \"malo\" en tu App. Puedes deshacer el último despliegue con este comando:\n\n```\ncap deploy:rollback\n```\n\n## Actualizar dependencias de composer cada vez que haces un despliegue\n\nCapistrano tiene un concepto de _Hooks_ que nos ayuda a correr comandos en momentos específicos del despliegue de la aplicación. Muchos desarrolladores utilizan Composer para administrar las dependencias de su App. Podemos instalar las dependencias de Composer durante cada despliegue de Capistrano usando un _hook_. Abre el archivo `config/deploy.rb` en tu editor de texto preferido y añade el siguiente código:\n\n```\nnamespace :deploy do\n    desc \"Build\"\n    after :updated, :build do\n        on roles(:web) do\n            within release_path do\n                execute :composer, \"install --no-dev --quiet --optimize-autoloader\"\n            end\n        end\n    end\nend\n```\n\nRecuerda que debes tener composer instalado en tu servidor remoto. Hostinger ya trae composer instalado en sus servidores compartidos, lo cual se puede comprobar corriendo el comando `composer` dentro del servidor.\n\n![Resultado de correr el comando \"composer\"](/img/uploads/composer-test.png)\n\nAhora, al hacer un \\`cap production deploy\\`, todas las dependencias de composer serán actualizadas en el servidor.\n\n## Seguir leyendo\n\n* <http://capistranorb.com> - En la documentación de Capistrano puedes aprender cómo personalizar y optimizar la secuencia de despliegue de tu App.\n* <http://shop.oreilly.com/product/0636920033868.do> - El libro \"Modern PHP\" de O'Reilly tiene más información sobre como configurar un servidor dedicado, crear usuarios y dar acceso SSH."
}