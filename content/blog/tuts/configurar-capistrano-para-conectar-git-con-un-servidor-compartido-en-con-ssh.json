{
  "title": "Configurar Capistrano para conectar Git con un servidor compartido en (con SSH)",
  "date": "2018-08-10T16:03:25+02:00",
  "body": "La herramienta Capistrano permite configurar _hooks_ de integración continua mediante un repositorio en Git y un servidor al que tengas acceso SSH.\n\nEste tutorial se centra en cómo configurar Capistrano para proveer integración continua entre un repositorio en GitLab y un servidor compartido en Hostinger.\n\nSin embargo, los pasos deberían poder seguirse en otros proveedores de Git y otros servidores de forma fácil. Si encuentras algún problema al implementar este tutorial, puedo ayudarte si envías un _issue_ en el [repositorio de GitHub de este mismo sitio web](https://github.com/AeonFr/francisco-cano.com), o si te contactas conmigo por email, o por cualquiera de los medios de contacto provistos en esta web.\n\n**DESDE EL SIGUIENTE PÁRRAFO Y HASTA NUEVO AVISO, ESTE POST CONTIENE UNA TRADUCCIÓN DEL LIBRO \"MODERN PHP\" POR JOSH LOCKHART. ME PARECIÓ IMPORTANTE PONER ESTA TRADUCCIÓN POR LA CALIDAD DE SU EXPLICACIÓN SOBRE EL PROCESO DE INSTALACIÓN DE CAPISTRANO. EL CONTENIDO DE ESTA PARTE SIRVE PARA CUALQUIERA QUE QUIERA INICIARSE EN CAPISTRANO; SIN IMPORTAR EL LENGUAJE DE SU APLICACIÓN O EL TIPO DE SERVIDOR QUE TENGA.**\n\n# Capistrano\n\nCapistrano (<http://capistranorb.com>) es un software que automatiza el _despliegue_ (_deployment_) del código de tu aplicación en una forma simple, predecible y fácil de revertir (si cometes un error es fácil volver al estado anterior, con un solo comando).\n\nCapistrano corre en un máquina local, y se comunica con el servidor remoto mediante SSH. Muchos hostings compartidos proveen acceso SSH con un usuario \"no _root_\", mientras que en los servidores dedicados tienes acceso SSH completo. En nuestro caso en particular, configuraremos Capistrano para un servidor sin acceso _root_, lo cual require únicamente un paso adicional.\n\nCapistrano funciona organizando los despliegues de la App en sus propios directorios en el servidor remoto. Capistrano mantiene cinco o más directorios de despliegues de la App en caso en que tengas que revertir el código a un estado anterior. Capistrano también crea un directorio _current/_ que es un _symlink_ al directorio de despliegue actual. En el servidor de producción, la estructura de Capistrano puede verse así:\n\n```\n/home/user/public_html/\n    my_app/\n        current/\n        releases/\n            release1/\n            release2/\n            release3/\n```\n\n## Instalación\n\nInstalar capistrano en tu máquina local require `ruby` y `gem`. Si tienes OS X, ya vendrán instalados. Luego de instalar `ruby` y `gem`, instala Capistrano con este comando:\n\n```\ngem install capistrano\n```\n\n## Configuración\n\nLuego de instalar Capistrano, debes inicializar tu proyecto. Abre una terminal, navega hasta el directorio raíz, y corre el siguiente comando:\n\n```\ncap install\n```\n\nEste comando crea un archivo llamado `Capfile`, un directorio llamado `config/`, y un directorio llamado `lib/`. El directorio raíz de tu proyecto ahora debería tener esta estructura:\n\n```\nCapfile\nconfig/\n    deploy/\n        production.rb\n        staging.rb\n    deploy.rb\nlib/\n    capistrano/\n        tasks/\n```\n\nEl archivo `Capfile` es el archivo de configuración de Capistrano, al que se le agrega la configuración del directorio `config/`. El directorio `config/` contiene archivos de configuración para cada entorno en el servidor remoto (ej.: testing, staging, production).\n\nLos archivos de configuración están escritos en ruby, sin embargo son fáciles de entender.\n\nPor defecto, Capistrano asume que tienes múltiples entornos para tu aplicación."
}